<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Searchify</name>
    </assembly>
    <members>
        <member name="T:Searchify.Config">
            <summary>
            Application Constants
            </summary>
        </member>
        <member name="T:Searchify.Controllers.DocumentController">
            <summary>
            Document controller class 
            </summary>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.GetAll">
            <summary>
            Handles Api request to get all documents
            </summary>
            <returns>
              A Response instance Containing a List of Documents <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.Get(System.Int32)">
            <summary>
            Controler method that returns information about a single book
            </summary>
            <param name="id"> Book id passed from the request url </param>
            <returns>
              A Response instance Containing a Document <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.Post(Searchify.Domain.Models.Document)">
            <summary>
            Controler method that created a Document
            </summary>
            <param name="data"> JSon data to create the book from </param>
            <returns>
              A Response instance Containing created Document <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.Post(System.Collections.Generic.List{Searchify.Domain.Models.Document})">
            <summary>
            Controler method that allows mutliple document update
            </summary>
            <param name="data"> List of Documents </param>
            <returns>
              A Response instance Containing a Documents <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.Delete(System.Int32)">
            <summary>
            Controler method that deletes a book with id passed in request url
            </summary>
            <param name="id"> Id of the document to be deleted </param>
            <returns>
              A Response instance containing deleted document <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="M:Searchify.Controllers.DocumentController.update(System.Int32,Searchify.Domain.Models.Document)">
            <summary>
            Controler method that updates a book with id passed in request url
            </summary>
            <param name="id"> Id of the document to be updates </param>
            <returns>
              A Response instance containing updated document <see cref="T:Searchify.Domain.Models.Document"/> and <see cref="T:Searchify.Domain.Utils.Response`1"/>
            </returns>
        </member>
        <member name="T:Searchify.Controllers.SearchController">
            <summary>
            Search controller class 
            </summary>
        </member>
        <member name="M:Searchify.Controllers.SearchController.#ctor(Searchify.Domain.Models.SearchifyContext,System.Boolean)">
            <summary>
            Search controller initializer
            </summary>
        </member>
        <member name="M:Searchify.Controllers.SearchController.Get(Searchify.Domain.Models.SearchQuery)">
            <summary>
            Method that handles search request, takes in query and run it against 
            </summary>
            <param name="parameters"> query string, autosuggestions bool </param>
            <returns> Response with list of matching documents </returns>
        </member>
        <member name="T:Searchify.Domain.Models.Document">
            <summary>
            Database model for Document
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Document.id">
            <summary>
            auto generated id the doc
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Document.url">
            <summary>
            document url
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Document.name">
            <summary>
            name of the document
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Document.preview_text">
            <summary>
            preview text of the document
            </summary>
        </member>
        <member name="T:Searchify.Domain.Models.SearchifyContext">
            <summary>
            Database context for the searchify api
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.SearchifyContext.Documents">
            <summary>
            Documents set
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.SearchifyContext.Suggestions">
            <summary>
            Suggestions set
            </summary>
        </member>
        <member name="T:Searchify.Domain.Models.SearchQuery">
            <summary>
            model for incoming search requests
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.SearchQuery.query">
            <summary>
            query string param
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.SearchQuery.autocomplete">
            <summary>
            autocomplete param to determine whether to search the index or show suggestions
            </summary>
        </member>
        <member name="T:Searchify.Domain.Models.Suggestions">
            <summary>
            DB model for auto complete suggestions
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Suggestions.query">
            <summary>
            string query
            </summary>
        </member>
        <member name="P:Searchify.Domain.Models.Suggestions.rank">
            <summary>
            rank of the suggestion, to help determine how valid the suggestion is to the query
            </summary>
        </member>
        <member name="T:Searchify.Domain.Utils.Helpers">
            <summary>
            Helper class that marks auto complete suggestions to indicate relevance to original query
            </summary>
        </member>
        <member name="M:Searchify.Domain.Utils.Helpers.MarkSuggestions(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Method to return 
            </summary>
            <param name="token">List of strings to mark</param>
            <param name="sentence"> Suggestion string to marked </param>
            <returns>Resultant string with html <mark/> markings </returns>
        </member>
        <member name="T:Searchify.Domain.Utils.Response`1">
            <summary>
            Class that helps structure json response
            </summary>
            <typeparam name="T">Type of data in response</typeparam>
        </member>
        <member name="P:Searchify.Domain.Utils.Response`1.data">
            <summary>
            data passed to response
            </summary>
        </member>
        <member name="P:Searchify.Domain.Utils.Response`1.message">
            <summary>
            message sent
            </summary>
        </member>
        <member name="M:Searchify.Domain.Utils.Stemmer.StemWord(System.String)">
            <summary>
            Stem the passed in word.
            </summary>
            <param name="word">Word to evaluate</param>
            <returns></returns>
        </member>
        <member name="T:Searchify.Domain.Utils.Stopwords">
            <summary>
            Static class that houses logic for removing stop words from a query
            </summary>
        </member>
        <member name="M:Searchify.Domain.Utils.Stopwords.LoadStopWords">
            <summary>
            Creates a Hashset of possible stop words in the english vocabulary
            </summary>
            <returns> A set of english stop words </returns>
        </member>
        <member name="M:Searchify.Domain.Utils.Stopwords.Clean(System.String)">
            <summary>
            Takes a string and removes the stop words in the string
            </summary>
            <param name="word">string from which to remove stop words</param>
            <returns>String without stop words</returns>
        </member>
        <member name="M:Searchify.Domain.Utils.Stopwords.compareQuery(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Helper method to determine if a string contains valid tokens that are not stop words
            </summary>
            <param name="queryTokens"> List of query tokes </param>
            <param name="suggestionTokens"> String </param>
            <returns>boolean to determine if string is a valid suggestion based on query tokens or not</returns>
        </member>
        <member name="T:Searchify.Domain.Utils.Tokenizer">
            <summary>
            Static class that houses tokenization logic
            </summary>
        </member>
        <member name="M:Searchify.Domain.Utils.Tokenizer.Tokenize(System.String)">
            <summary>
            Tokenizes text
            </summary>
            <param name="text">any string value</param>
            <returns>array of stemmed words with stopwords filtered out</returns>
        </member>
        <member name="T:Searchify.Domain.Utils.Utils">
            <summary>
            Static class housing a number of utility methods
            </summary>
        </member>
        <member name="M:Searchify.Domain.Utils.Utils.CleanText(System.String)">
            <summary>
            Converts multiple spaces to one an strips punctuation from text, converts text to lowercase
            </summary>
            <param name="text">any string value</param>
            <returns>cleaned text</returns>
        </member>
        <member name="M:Searchify.Domain.Utils.Utils.ToDeltaList(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a list where elements are replaced by the value of the delta between each element and the previous element
            </summary>
            <param name="list">list of nonnegative integers</param>
            <returns>list of delta ulong values</returns>
        </member>
        <member name="T:Searchify.Services.IndexingService">
            <summary>
            Class that handles the relaying to uploaded documents to indexing service
            </summary>
        </member>
        <member name="M:Searchify.Services.IndexingService.Index(Searchify.Domain.Models.Document,System.String)">
            <summary>
            Static method that relays multiple books to the indexing service
            </summary>
            <param name="data">Document to be indexed</param>
            <returns> A boolean promise that determines if the relaying of documents was succesfull</returns>
        </member>
        <member name="M:Searchify.Services.IndexingService.IndexMany(System.Collections.Generic.List{Searchify.Domain.Models.Document})">
            <summary>
            Static method that relays multiple books to the indexing service
            </summary>
            <param name="data"> List of documents to be indexed </param>
            <returns> A boolean promise that determines if the relaying of documents was succesfull </returns>
        </member>
        <member name="T:Searchify.Services.InvertedIndex.IndexTerm">
            <summary>
            Index term representation, stores file delta, frequency and positions of word
            </summary>
        </member>
        <member name="T:Searchify.Services.InvertedIndex.Indexer">
            <summary>
            Indexer class builds and maintains internal search index
            </summary>
        </member>
        <member name="F:Searchify.Services.InvertedIndex.Indexer.LastId">
            <summary>
            Last File ID indexed
            </summary>
        </member>
        <member name="M:Searchify.Services.InvertedIndex.Indexer.GetIndexTermArray(System.String)">
            <summary>
            Returns index list associated with <paramref name="word"/>
            </summary>
            <param name="word">any string</param>
            <returns>Index list of word</returns>
        </member>
        <member name="T:Searchify.Services.Ranker">
            <summary>
            Maintains and calculates document scores for a query
            </summary>
        </member>
        <member name="M:Searchify.Services.Ranker.#ctor(Searchify.Services.InvertedIndex.Indexer)">
            <summary>
            Instantiates a ranker object
            </summary>
            <param name="indexer">an instance of <see cref="T:Searchify.Services.InvertedIndex.Indexer"/></param>
        </member>
        <member name="M:Searchify.Services.Ranker.Score(System.UInt32,System.Collections.Generic.List{Searchify.Services.Searcher.Pointer})">
            <summary>
            Computes and stores file score
            </summary>
            <param name="fieldId">id of file</param>
            <param name="pointerList">pointer list of query terms that can be found in the file</param>
        </member>
        <member name="M:Searchify.Services.Ranker.RankedResultsList">
            <summary>
            Returns an ordered array of file ids based on scores
            </summary>
            <returns>list of file ids</returns>
        </member>
        <member name="T:Searchify.Services.Searcher.Pointer">
            <summary>
            Search Pointer object aids the k-way linear merge algorithm by storing the pointer to each index term being
            iterated reverse index
            </summary>
        </member>
        <member name="F:Searchify.Services.Searcher.Pointer.Term">
            <summary>
            The key of the reverse index
            </summary>
        </member>
        <member name="F:Searchify.Services.Searcher.Pointer.P">
            <summary>
            Index of current iteration of the Index Term list
            </summary>
        </member>
        <member name="F:Searchify.Services.Searcher.Pointer.FileId">
            <summary>
            FileId of Index Term
            </summary>
        </member>
        <member name="M:Searchify.Services.Searcher.Pointer.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Instantiate a Pointer object
            </summary>
            <param name="term">word</param>
            <param name="p">current index of IndexTermList iteration</param>
            <param name="fileId">file id</param>
        </member>
        <member name="M:Searchify.Services.Searcher.Pointer.CompareTo(System.Object)">
            <summary>
            IComparable implementation
            </summary>
            <param name="other">object for comparison</param>
            <returns>
            1 when this.FileId gt other.FileId
            -1 when this.FileId lt other.FileId
            0 otherwise
            </returns>
            <exception cref="T:System.ArgumentException">Raised when comparing with null</exception>
        </member>
        <member name="T:Searchify.Services.Searcher.Searcher">
            <summary>
            Searcher class operates on an indexer
            </summary>
        </member>
        <member name="M:Searchify.Services.Searcher.Searcher.#ctor(Searchify.Services.InvertedIndex.Indexer)">
            <summary>
            Instantiates a Searcher object
            </summary>
            <param name="indexer">instance of <see cref="T:Searchify.Services.InvertedIndex.Indexer"/></param>
        </member>
        <member name="M:Searchify.Services.Searcher.Searcher.ExecuteQuery(System.String)">
            <summary>
            Returns a ranked array of file ids associated with a query
            </summary>
            <param name="query">any nonempty string value</param>
            <returns>Ranked array of file ids</returns>
        </member>
    </members>
</doc>
